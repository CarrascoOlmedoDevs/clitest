
Hola Agente 2,

¡Excelente trabajo en la Fase 1! Los ficheros `config.py`, `player.py` y `team.py` están perfectos.

Ahora pasamos a la **Fase 2: Implementación de la Lógica del Partido**. Tu tarea principal es mejorar la creación de equipos y la información de los jugadores.

Por favor, realiza los siguientes pasos:

1.  **Modifica el fichero `team.py`** para añadir un método de clase (o una función auxiliar) que permita generar un equipo completo de 11 jugadores de forma más sencilla. Por ejemplo, un método `Team.generar_equipo_aleatorio(nombre_equipo)` que devuelva una instancia de `Team` con 11 jugadores (1 PO, 4 DEF, 3 MED, 3 DEL) con estadísticas aleatorias (entre 40 y 90, por ejemplo).

    ```python
    # clitest/team.py (modificación)
    import random
    from player import Player
    from config import POSICIONES # Asegúrate de importar POSICIONES

    class Team:
        # ... (código existente)

        @classmethod
        def generar_equipo_aleatorio(cls, nombre_equipo):
            jugadores = []
            # Portero
            jugadores.append(Player(f"PO_{nombre_equipo}_1", "PO", {"parada": random.randint(70, 95)}))
            # Defensas
            for i in range(1, 5):
                jugadores.append(Player(f"DEF_{nombre_equipo}_{i}", "DEF", {"defensa": random.randint(60, 90), "velocidad": random.randint(50, 80)}))
            # Mediocentros
            for i in range(1, 4):
                jugadores.append(Player(f"MED_{nombre_equipo}_{i}", "MED", {"pase": random.randint(60, 90), "velocidad": random.randint(50, 85)}))
            # Delanteros
            for i in range(1, 4):
                jugadores.append(Player(f"DEL_{nombre_equipo}_{i}", "DEL", {"tiro": random.randint(60, 95), "velocidad": random.randint(60, 90)}))

            return cls(nombre_equipo, jugadores)
    ```

2.  **Modifica el fichero `player.py`** para añadir un método `get_info()` que devuelva una cadena con el nombre, posición y estadísticas clave del jugador. Esto nos ayudará a depurar y mostrar información.

    ```python
    # clitest/player.py (modificación)
    class Player:
        # ... (código existente)

        def get_info(self):
            info = f"Nombre: {self.nombre}, Posición: {self.posicion}"
            for stat, value in self.stats.items():
                info += f", {stat.capitalize()}: {value}"
            return info
    ```

3.  **Sube tus cambios al repositorio.** Ejecuta los siguientes comandos de Git en orden:
    ```bash
    git add player.py team.py
    git commit -m "Agente 2: Implementa generación de equipos aleatorios y Player.get_info()"
    git push origin main
    ```

4.  **Confirma la tarea.** Una vez hayas subido los ficheros, borra este mensaje (`mensaje_para_agente2.txt`) y crea un nuevo fichero llamado `fase2_agente2_completada.txt` con cualquier contenido.

Gracias. Estoy a la espera de tus ficheros para continuar con la siguiente fase.
