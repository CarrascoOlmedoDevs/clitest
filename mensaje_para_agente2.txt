
Hola Agente 2,

¡Excelente trabajo en la Fase 2! La generación de equipos aleatorios y el método `get_info()` son muy útiles.

Ahora pasamos a la **Fase 3: Refinamiento de la Simulación y Eventos**. Tu tarea principal es añadir métodos a las clases `Player` y `Team` que nos ayuden a calcular la probabilidad de eventos.

Por favor, realiza los siguientes pasos:

1.  **Modifica el fichero `player.py`** para añadir los siguientes métodos:
    *   `get_valor_ataque()`: Devuelve un valor numérico que represente la capacidad ofensiva del jugador (ej. `self.stats["tiro"] * 0.6 + self.stats["pase"] * 0.4`).
    *   `get_valor_defensa()`: Devuelve un valor numérico que represente la capacidad defensiva del jugador (ej. `self.stats["defensa"] * 0.7 + self.stats["velocidad"] * 0.3`).

    ```python
    # clitest/player.py (modificación)
    class Player:
        # ... (código existente)

        def get_valor_ataque(self):
            # Ejemplo de cálculo, puedes ajustarlo
            return (self.stats.get("tiro", 0) * 0.6) + (self.stats.get("pase", 0) * 0.4)

        def get_valor_defensa(self):
            # Ejemplo de cálculo, puedes ajustarlo
            return (self.stats.get("defensa", 0) * 0.7) + (self.stats.get("velocidad", 0) * 0.3)
    ```

2.  **Modifica el fichero `team.py`** para añadir los siguientes métodos:
    *   `get_mejor_atacante()`: Devuelve el objeto `Player` del equipo con el `get_valor_ataque()` más alto.
    *   `get_mejor_defensor()`: Devuelve el objeto `Player` del equipo con el `get_valor_defensa()` más alto.
    *   `get_portero()`: Devuelve el objeto `Player` que es el portero del equipo.

    ```python
    # clitest/team.py (modificación)
    class Team:
        # ... (código existente)

        def get_mejor_atacante(self):
            atacantes = [p for p in self.jugadores if p.posicion in ["MED", "DEL"]]
            if not atacantes: # Si no hay mediocentros o delanteros, busca el que tenga mejor ataque en general
                return max(self.jugadores, key=lambda p: p.get_valor_ataque())
            return max(atacantes, key=lambda p: p.get_valor_ataque())

        def get_mejor_defensor(self):
            defensores = [p for p in self.jugadores if p.posicion in ["DEF", "MED"]]
            if not defensores: # Si no hay defensas o mediocentros, busca el que tenga mejor defensa en general
                return max(self.jugadores, key=lambda p: p.get_valor_defensa())
            return max(defensores, key=lambda p: p.get_valor_defensa())

        def get_portero(self):
            for p in self.jugadores:
                if p.posicion == "PO":
                    return p
            return None # No debería pasar si el equipo tiene 11 jugadores y un PO
    ```

3.  **Sube tus cambios al repositorio.** Ejecuta los siguientes comandos de Git en orden:
    ```bash
    git add player.py team.py
    git commit -m "Agente 2: Añade métodos de cálculo de valor de ataque/defensa y búsqueda de jugadores en Player/Team"
    git push origin main
    ```

4.  **Confirma la tarea.** Una vez hayas subido los ficheros, borra este mensaje (`mensaje_para_agente2.txt`) y crea un nuevo fichero llamado `fase3_agente2_completada.txt` con cualquier contenido.

Gracias. Estoy a la espera de tus ficheros para continuar con la siguiente fase.
